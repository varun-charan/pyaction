name: "Pyactions Action"
description: "Run a Pyaction command"
author: "Charan, Varun <varun.charan>"

inputs:
  devops_version:
    description: "DevOps CLI version required. Defaults to release version of pyaction"
    required: false
    type: string
    default: "v0.3.0"
  index_url_pip:
    description: "URL to use for pip install package from Private Python Index"
    required: true
    type: string
  export_list:
    description: "variable key=value pairs to run export command with."
    required: false
    type: list
  flags:
    description: "Additional flags in devops cli command"
    required: false
    type: string
    default: ""
  command:
    description: "Pyactions command you want to run"
    required: true
    type: string
  subcommand:
    description: "Pyactions subcommand for the command you want to run"
    required: false
    type: string
  args:
    description: "Arguments to the Pyactions command"
    required: false
    type: list
outputs:
  stdout:
    description: "Stdout output of devops cli commands"
    value: ${{ steps.non-exec-command.outputs.stdout }}
runs:
  using: "composite"
  steps:
    - name: Setup devops cli
      shell: bash
      run: |
        pip install devops==${{ env.VERSION }} --extra-index ${{ env.INDEX_URL_PIP }}
        devops --version
      env:
        VERSION: ${{ inputs.devops_version }}
        INDEX_URL_PIP: ${{ inputs.index_url_pip }}

    - name: Run the exec devops cli command
      if: ${{ env.COMMAND == 'exec' }}
      shell: bash
      run: devops ${{ env.FLAGS }} ${{ env.COMMAND }} ${{ env.SUBCOMMAND }} '${{ env.ARGS }}'
      env:
        FLAGS: ${{ inputs.flags }}
        COMMAND: ${{ inputs.command }}
        SUBCOMMAND: ${{ inputs.subcommand }}
        ARGS: ${{ inputs.args }}

    - name: Run all non-exec devops cli commands
      if: ${{ env.COMMAND != 'exec' }}
      id: non-exec-command
      shell: bash
      run: |
        IFS=', ' read -r -a export_list <<< "${{ env.EXPORT_LIST }}"
        for element in "${export_list[@]}"
        do
            export $element
        done
        echo "::set-output name=stdout::$(devops ${{ env.FLAGS }} ${{ env.COMMAND }} ${{ env.SUBCOMMAND }} ${{ env.ARGS }})"
      env:
        FLAGS: ${{ inputs.flags }}
        COMMAND: ${{ inputs.command }}
        SUBCOMMAND: ${{ inputs.subcommand }}
        ARGS: ${{ inputs.args }}
        EXPORT_LIST: ${{ inputs.export_list }}
